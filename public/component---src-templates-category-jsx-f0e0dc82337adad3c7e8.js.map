{"version":3,"sources":["webpack:///./src/components/PostPreview/PostPreview.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/templates/category.jsx"],"names":["PostPreview","props","state","mobile","handleResize","bind","componentDidMount","this","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","render","postInfo","expand","cover","startsWith","__PATH_PREFIX__","coverHeight","key","path","raise","className","style","textDecoration","to","backgroundImage","height","Media","title","raised","secondary","expander","avatar","icon","iconClassName","date","subtitle","timeToRead","expandable","excerpt","PostTags","tags","Component","PostListing","getPostList","postList","postEdges","forEach","postEdge","push","node","fields","slug","frontmatter","map","post","React","exports","__esModule","MediaOverlay","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","CategoryTemplate","category","pathContext","data","allMarkdownRemark","edges","config","siteTitle","rel","href","siteUrl","pageQuery"],"mappings":"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","file":"component---src-templates-category-jsx-f0e0dc82337adad3c7e8.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Link from \"gatsby-link\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags/PostTags\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\"*/\n    const cover = postInfo.cover.startsWith(\"/\")\n      ? __PATH_PREFIX__ + postInfo.cover\n      : postInfo.cover;\n    const coverHeight = mobile ? 462 : 325;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media\n            style={{\n              backgroundImage: `url(${cover})`,\n              height: `${coverHeight}px`\n            }}\n            className=\"post-preview-cover\"\n          >\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${postInfo.date}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview/PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.frontmatter.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post =>\n            <PostPreview key={post.title} postInfo={post} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\n\nexport default class CategoryTemplate extends React.Component {\n  render() {\n    const category = this.props.pathContext.category;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <div className=\"category-container\">\n        <Helmet>\n          <title>{`Posts in category \"${category}\" | ${config.siteTitle}`}</title>\n          <link rel=\"canonical\" href={`${config.siteUrl}/categories/${category}`} />\n        </Helmet>\n        <PostListing postEdges={postEdges} />\n      </div>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\"*/\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}